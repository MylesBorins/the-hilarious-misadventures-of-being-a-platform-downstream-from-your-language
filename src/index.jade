doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title The Hilarious Misadventures of Being a Platform Downstream From Your Language

    link(rel='stylesheet', type='text/css', href='build/build.css')

  style.
    .hello {
      background-image: url('images/hello-tharr.gif')
    }
    .ninety-five {
      background-image: url('images/1995.gif')
    }
    .brendan {
      background-image: url('images/brendan.jpg')
    }
    .node {
      background-image: url('images/node.jpg')
    }
    .dahl {
      background-image: url('images/dahl.jpg')
    }
    .jsconf {
      background-image: url('images/dahl-jsconf.png')
    }
    .monster {
      background-image: url('images/monster.gif')
    }
    .multiplicity {
      background-image: url('images/multiplicity.jpg')
    }
    .vee-eight {
      background-image: url('images/chrome-v8.jpg')
    }
    .edge {
      background-image: url('images/edge.jpg')
    }
    .webkit {
      background-image: url('images/webkit.png')
    }
    .firefox {
      background-image: url('images/firefox.jpg')
    }
    .brewster {
      background-image: url('images/brewster.gif')
    }
    .io {
      background-image: url('images/io.jpg')
    }
    .ready {
      background-image: url('images/ready.jpg')
    }
    .evolve {
      background-image: url('images/evolve.gif')
    }
    .back {
      background-image: url('images/back.gif')
    }
    .js {
      background-image: url('images/js.png')
    }
    .morticia {
      background-image: url('images/morticia.gif')
    }
    .turtle {
      background-image: url('images/turtle.png')
    }
    .napi {
      background-image: url('images/napi.gif')
    }
    .clever {
      background-image: url('images/clever.jpg')
    }
    .science {
      background-image: url('images/science.gif')
    }
    .turtles {
      background-image: url('images/turtles.gif')
    }
    
    .small {
      background-image: url('images/small.jpg')
    }
    .complicated {
      background-image: url('images/complicated.gif')
    }
    .abi {
      background-image: url('images/abi.png')
    }
    .ten {
      background-image: url('images/ten.gif')
    }
    .gimmee {
      background-image: url('images/gimmee.gif')
    }
    .domain {
      background-image: url('images/domain.gif')
    }
    .call {
      background-image: url('images/call.gif')
    }
    .anyone {
      background-image: url('images/anyone.gif')
    }
    .warp {
      background-image: url('images/warp.gif')
    }
    .newyear {
      background-image: url('images/newyear.gif')
    }
    .major {
      background-image: url('images/major.jpg')
    }
    .stable {
      background-image: url('images/stable.jpg')
    }

  body

    article

      section
        h2 The Hilarious Misadventures
        h3 Of Being a Platform Downstream From Your Language
        h4 With your host
        h4
          a(href='https://twitter.com/MylesBorins') @MylesBorins
        p  JavaScript Talk Story Feb 2019
        
      section(data-bespoke-backdrop='hello')
        h1 Aloha!
        
      section
        h1 My Name is Myles
        img.headroom(src='images/me.jpg' alt='itsa me!' width='200px' height='200px')
      
      section
        h3 I am gainfully employed by Google as a Developer Advocate
        h4 Focusing on the Node.js ecosystem and GCP
        
        img(src='images/gcp.png' alt='Google Cloud Platform' style='background-color:white;')
        
        h5.headroom The opinions expressed in this talk are solely my own
      
      section(data-bespoke-backdrop='ninety-five')
        h1 once upon a time in
      
      section(data-bespoke-backdrop='brendan')
        h2 Brendan Eich
        h3 created the language
        h2 mocha
      
      section(data-bespoke-backdrop='ten')
        h1 in 10 days
      
      section
        h2 Four months later
        h3 it was renamed
        h2 LiveScript
      
      section
        h2 Two months later
        h3 it was renamed
        h2 JavaScript

      section
        h2 Over the next two years
        h3 The language was standardized
        h2 as ECMASCript
        h3 At ECMA International
        h4 European Computer Manufacturers Association

      section
        h3 Wait is it actually called ECMAScript?
        img.headroom(src='images/confused.gif' alt='classic dank meme')
      
      section(data-bespoke-backdrop='monster')
        h3 Does that make JavaScript
        h2 ECMAScript's Monster?

      section
        h3 ECMAScript is the standard
        h2 JavaScript is an implementation
        h4 *cough* so was ActionScript 3 *cough*

      section(data-bespoke-backdrop='multiplicity')
        h1 Today we have many implementations
      
      section(data-bespoke-backdrop='vee-eight')
        h3 In Chrome
        h2 There is V8
      
      section(data-bespoke-backdrop='edge')
        h3 In Edge
        h2 There is Chakra

      section(data-bespoke-backdrop='webkit')
        h3 In WebKit (Safari)
        h2 There is JavaScriptCore
      
      section(data-bespoke-backdrop='firefox')
        h3 In Firefox
        h2 There is SpiderMonkey

      section
        h3 They are all implementation of
        h2 ECMA-262
        h3 The ECMAScriptÂ® 2019 Language Specification

      section(data-bespoke-backdrop='node')
        h1 Let's talk about Node
      
      section(data-bespoke-backdrop='dahl')
        h1 It was created by Ryan Dahl
      
      section(data-bespoke-backdrop='jsconf')
        h1 First presented at JSConf.eu 2009

      section
        h1 Node.js has never implemented JavaScript

      section(data-bespoke-backdrop='brewster')
        h1 It inherited it

      section
        h3 It was bootstrapped by embedding
        h2 The V8 engine

      section(data-bespoke-backdrop='gimmee')
        h4 We get the language features
        h3 Of the embedded version of V8

      section(data-bespoke-backdrop='io')
        h3 This was one of the contentious point in the io.js fork

      section
        h1 We are now actively updating V8

      section
        h4 Which in turn
        h3 Updates the language features offered in Node.js
      
      section(data-bespoke-backdrop='ready')

      section
        h1 A Practical Example

      section
        h3 In Node.js v7.7.0
        h2 We updated V8 to 5.5

      section
        h3 With it came async / await
        h2 ðŸŽ‰

      section
        h3 This in turn made it clear
        h2 We needed better promise support

      section
        h3 Which in turn
        h2 Lead to util.promisify
        h3 in 8.0.0

      section(data-bespoke-backdrop='domain')
        h3 Which in turn required massive refactoring
        h2 To Domains

      section
        h3 Which are technically are deprecated
        h2 but we don't have a better solution

      section(data-bespoke-backdrop='morticia')
        h3 It also resulted in problems with
        h2 Post mortem debugging
        h3 For uncaught exceptions

      section(data-bespoke-backdrop='call')
        h3 Because Node.js has made a lot of assumptions
        h2 Regarding Callbacks

      section(data-bespoke-backdrop='evolve')
        h3 As the language evolves
        h2 We have to keep up
      
      section(data-bespoke-backdrop='back')
        h1 Taking a step back

      section
        img(src='images/babby.jpg' alt='how is language babby formed')

      section
        h3 The Spec is
        h2 ECMA-262

      section
        h3 The Committee who implements it is
        img.headroom(src='images/tc39.png' alt='logo for tc39')

      section
        h3 The committee meets
        h2 every other month
        h3 At locations around the world

      section
        h2 The participants include
        ul
          li.hide
          li Major Browser Vendors
          li Academics
          li Industry Experts
          li Open Source Maintainers
          li Maybe you?

      section(data-bespoke-backdrop='anyone')
        h1 Can Anyone Join?

      section
        h1 What is a Member?
      
      section
        h1 What is a Delegate?

      section
        h1 How does a feature get developed?

      section
        h1 Consensus

      section
        h2 The Stages
        li.hide
        li Stage 0: strawman
        li Stage 1: proposal
        li Stage 2: draft
        li Stage 3: candidate
        li Stage 4: finished

      section
        h1 test262

      section(data-bespoke-backdrop='warp')
        h3 A feature can only move
        h2 one stage per meeting

      section(data-bespoke-backdrop='newyear')
        h3 Every year
        h4 A new version of the specification is published

      section
        h3 Although some people like to think of the github repo
        h2 As a living specification
        h3 similar to how the HTML specification works

      section
        img(src='images/spec1.png' alt='spec definition of null')

      section
        img(src='images/spec2.png' alt='spec definition of isArray' width='80%')

      section
        h3 JavaScript Engines
        h2 Implement the Specification

      section
        h1 BUT
      
      section
        img(src='images/think.png' alt='Think of the spec as another implementation' width='50%')
      
      section(data-bespoke-backdrop='monster')
        h3 Does that make ECMAScript
        h2 JavaScript's Monster?
      
      section
        img(src='images/tc39.png' alt='logo for tc39')
      
      section
        img(src='images/ecma262.png' alt='ecma262' width='70%')
      
      section(data-bespoke-backdrop='vee-eight')
      
      section(data-bespoke-backdrop='turtle')
      
      section
        img(src='images/bot.png' alt='twitter bot' height='50%')
      
      section
        h3 V8 has a C++ API
        h2 Used by Node and Native Module Authors
      
      section(data-bespoke-backdrop='abi')
        h3 The compiled code relies on an
        h2 Application Binary Interface
      
      section
        h3 Semver Minor Changes
        h2 To the V8 API
        h3 Can Create Semver Major Changes
        h2 To the compiled ABI
      
      section(data-bespoke-backdrop='major')
        h3 This means updating V8
        h2 Is Semver Major
        h3 Which limits us to 2 upgrades a year
      
      section
        h3 This also means that code compiled with one major version of node
        h2 Will not work
        h3 With another major version
      
      section
        h4 This is independant of tracking changes in the V8 API
        h3 Which could break all the native modules
        h4 At an implementation level
      
      section
        h3 The initial attempt to solve this was
        h2 NAN
        h3 Native Abstractions for Node
      
      section
        h3 NAN offers an intermediate API to write against
        h2 So that changes to the V8 Api
        h3 Don't break your code
      
      section
        h1 This didn't solve the ABI Problem
      
      section(data-bespoke-backdrop='napi')
        h1 Enter the N-API
      
      section
        h3 The N-API is an ABI stable abstraction
        h2 Meaning updates to the V8 ABI
        h3 Don't break your native code
      
      section(data-bespoke-backdrop='clever')
        h3 If the ABI is stable
        h2 other engines can shim against it
        h3 Now you can use any engine in node
      
      section(data-bespoke-backdrop='stable')
        h1 N-API is now shipping as Stable in 10.x!
      
      section(data-bespoke-backdrop='science')
        h1 N-API was also backported to 6.x and 8.x

      section(data-bespoke-backdrop='complicated')
        h1 There are a lot of moving parts
      
      section(data-bespoke-backdrop='turtles')
        h2 We are trying to build abstractions
        h3 so you do not need to understand everything

      section(data-bespoke-backdrop='small')
        h3 We do this work so you can focus on your product
        h2 rather than getting lost in the tools
      
      section
        img(src='images/js.png' width='40%')
      
      section
        h2 Thank You
        img.headroom(src='images/best-gif-evar.gif' alt='a surfing puppy' width='20%')
        h4 @MylesBorins

    script(src='build/build.js')
